{"/home/travis/build/npmtest/node-npmtest-auto-updater/test.js":"/* istanbul instrument in package npmtest_auto_updater */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-auto-updater/lib.npmtest_auto_updater.js":"/* istanbul instrument in package npmtest_auto_updater */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_auto_updater = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_auto_updater = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-auto-updater/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-auto-updater && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_auto_updater */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_auto_updater\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_auto_updater.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_auto_updater.rollup.js'] =\n            local.assetsDict['/assets.npmtest_auto_updater.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_auto_updater.__dirname + '/lib.npmtest_auto_updater.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-auto-updater/node_modules/auto-updater/auto-updater.js":"var fs = require('fs'),\r\n\r\n  util = require('util'),\r\n  path = require('path').posix,\r\n\r\n  http = require('http'),\r\n  https = require('https'),\r\n\r\n  EventEmitter = require('events').EventEmitter;\r\n\r\nvar _ = require('underscore'),\r\n  Defer = require('node-promise').defer;\r\n\r\n/**\r\n * @class AutoUpdater\r\n * @extends event-emitter\r\n */\r\nvar AutoUpdater = function(config) {\r\n  EventEmitter.apply(this);\r\n\r\n  this.attrs = _.extend({}, AutoUpdater.defaults, config);\r\n  this.update_dest = 'update';\r\n  this.cache = {};\r\n  this.jsons = {};\r\n};\r\n\r\n// Proto inheritance\r\nutil.inherits(AutoUpdater, EventEmitter);\r\nAutoUpdater.prototype.emit = null;\r\n\r\n/**\r\n * The user has a git clone. Recommend use the \"git pull\" command\r\n * @event git-clone\r\n */\r\n\r\n/**\r\n * Versions match\r\n * @event check.up-to-date\r\n * @param {String} version Version number\r\n */\r\n\r\n/**\r\n * Versions don't match\r\n * @event check.out-dated\r\n * @param {String} v_old Old (local) version number\r\n * @param {String} v New version number\r\n */\r\n\r\n/**\r\n * Update downloaded in the machine\r\n * @event update.downloaded\r\n */\r\n\r\n/**\r\n * Update was already in the dir, so it wasnt installed\r\n * @event update.not-installed\r\n */\r\n\r\n/**\r\n * The update has been extracted correctly.\r\n * @event update.extracted\r\n */\r\n\r\n/**\r\n * The download has started\r\n * @event download.start\r\n * @param {String} name Name of the update\r\n */\r\n\r\n/**\r\n * The download has been updated. New percentage\r\n * @event download.progress\r\n * @param {String} name Name of the update\r\n * @param {Number} percent Percent of completion\r\n */\r\n\r\n/**\r\n * The download has ended\r\n * @event download.end\r\n * @param {String} name Name of the update\r\n */\r\n\r\n/**\r\n * Something happened to the download\r\n * @event download.error\r\n * @param {Error} e\r\n */\r\n\r\n/**\r\n * Called when all is over\r\n * ( along with 'check.up-to-date' if there are no updates, or with 'update.extracted' if it was installed )\r\n * @event end\r\n */\r\n\r\nAutoUpdater.defaults = {\r\n  /**\r\n   * @attribute pathToJson\r\n   * @type {String}\r\n   * @default ''\r\n   */\r\n  pathToJson: '',\r\n  /**\r\n   * @attribute autoupdate\r\n   * @type {Boolean}\r\n   * @default false\r\n   */\r\n  autoupdate: false,\r\n  /**\r\n   * @attribute checkgit\r\n   * @type {Boolean}\r\n   * @default false\r\n   */\r\n  checkgit: false,\r\n  /**\r\n   * @attribute jsonhost\r\n   * @type {String}\r\n   * @default 'raw.githubusercontent.com'\r\n   */\r\n  jsonhost: 'raw.githubusercontent.com',\r\n  /**\r\n   * @attribute contenthost\r\n   * @type {String}\r\n   * @default 'codeload.github.com'\r\n   */\r\n  contenthost: 'codeload.github.com',\r\n  /**\r\n   * @attribute devmode\r\n   * @type {Boolean}\r\n   * @default false\r\n   */\r\n  devmode: false,\r\n  /**\r\n   * If greater than 0, download progress gets debounced using this time (in ms)\r\n   * @attribute progressDebounce\r\n   * @type {Number}\r\n   * @default 0\r\n   */\r\n  progressDebounce: 0\r\n};\r\n\r\n/**\r\n * Extra config\r\n * @method use\r\n * @param  {Object} options Custom options\r\n * @chainable\r\n */\r\nAutoUpdater.prototype.use = function(options) {\r\n  _.extend(this.attrs, options);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Fire commands\r\n * @method fire\r\n * @param  {String} command Name of command\r\n */\r\nAutoUpdater.prototype.fire = function(command) {\r\n  return commands[command].apply(this, _.toArray(arguments).slice(1));\r\n};\r\n\r\n/**\r\n * Error message handling\r\n *   (if debug mode, triggers console error)\r\n * @method error\r\n * @param  {String} message Description of the error\r\n * @param  {String} code    Error code\r\n * @param  {Exception} e       Error object\r\n * @private\r\n */\r\nAutoUpdater.prototype.error = function(message, code, e) {\r\n  if (this.attrs.devmode) {\r\n    console.error(message);\r\n  }\r\n  emit(this, 'error', code, e || {});\r\n};\r\n\r\n/**\r\n * Emitts events\r\n * @method emit\r\n * @param  {Context} context Context of AutoUpdater\r\n * @private\r\n */\r\nfunction emit(context) {\r\n  EventEmitter.prototype.emit.apply(context, _.toArray(arguments).slice(1));\r\n}\r\n\r\nvar commands = {\r\n  /**\r\n   * Checks packages versions (local and remote)\r\n   * @method check\r\n   * @chainable\r\n   */\r\n  'check': function() {\r\n    // first check git if needed\r\n    if (this.attrs.checkgit && checkGit.call(this)){\r\n      return;\r\n    }\r\n\r\n    loadClientJson.call(this)\r\n      .then(loadRemoteJson.bind(this))\r\n      .then(loaded.bind(this));\r\n\r\n    return this;\r\n  },\r\n  /**\r\n   * Downloads the latest zip\r\n   * Fires:\r\n   *   'update.not-installed' if the update exists but it wasn't installed\r\n   *   'update.downloaded' if the update was successfully downloaded\r\n   * @method download-update\r\n   * @chainable\r\n   */\r\n  'download-update': function() {\r\n    // Validation\r\n    if (!this.jsons.client) {\r\n      return loadClientJson.call(this)\r\n        .then(loadRemoteJson.bind(this))\r\n        .then(commands['download-update'].bind(this));\r\n    }\r\n\r\n    var self = this,\r\n      jsoninfo = this.jsons.client['auto-updater'];\r\n\r\n    remoteDownloadUpdate.call(this, this.updateName, {\r\n        host: this.attrs.contenthost,\r\n        path: '/' + path.join(jsoninfo.repo,\r\n          'zip',\r\n          jsoninfo.branch)\r\n      })\r\n      .then(function(existed) {\r\n        if (existed === true)\r\n          emit(self, 'update.not-installed');\r\n        else\r\n          emit(self, 'update.downloaded');\r\n\r\n        if (self.attrs.autoupdate) {\r\n          self.fire('extract');\r\n        }\r\n      });\r\n    return this;\r\n  },\r\n  /**\r\n   * Extracts the zip, replacing everything.\r\n   * Fires:\r\n   *   'update.extracted' when the extraction was successful\r\n   *   'end' when the extraction was successful\r\n   * @method extract\r\n   * @chainable\r\n   */\r\n  'extract': function(subfolder) {\r\n    var self = this;\r\n    extract.call(this, this.updateName, subfolder)\r\n      .then(function() {\r\n        emit(self, 'update.extracted');\r\n        emit(self, 'end');\r\n      });\r\n    return this;\r\n  },\r\n  /**\r\n   * Checks against cache, and if not, calculates\r\n   * @method diff-dependencies\r\n   * @return {Array}\r\n   */\r\n  'diff-dependencies': function() {\r\n    if (!this.cache.dependencies) {\r\n      checkDependencies.call(this);\r\n    }\r\n    return this.cache.dependencies;\r\n  }\r\n};\r\n\r\n/**\r\n * Parses and filters package.json\r\n * @method parsePackageJson\r\n * @param  {String || Object} data Parsed or raw package.json\r\n * @return {Object} Object containing only 'auto-updater', 'version' and 'dependencies'\r\n * @private\r\n */\r\nvar parsePackageJson = function(data) {\r\n  if (!_.isObject(data)) {\r\n    data = JSON.parse(data);\r\n  }\r\n  // Validation\r\n  if (!data['auto-updater']) {\r\n    this.error('Invalid package.json. No auto-updater field', 'json.error');\r\n    throw 'error';\r\n  }\r\n\r\n  var filtered = _.pick(data, 'auto-updater', 'version', 'dependencies');\r\n  return filtered;\r\n};\r\n\r\n/**\r\n * Fires:\r\n *   'git-clone' if it has a .git folder\r\n * @method _checkGit\r\n * @return {Boolean}  Has git folder\r\n * @private\r\n */\r\nvar checkGit = function() {\r\n  if (this.cache.git === undefined) {\r\n\r\n    this.cache.git = fs.existsSync('.git');\r\n\r\n    if (this.cache.git === true) {\r\n      emit(this, 'git-clone');\r\n    }\r\n  }\r\n  return this.cache.git;\r\n};\r\n/**\r\n * Reads the package.json\r\n * @method loadClientJson\r\n * @return {Promise}\r\n * @private\r\n */\r\nvar loadClientJson = function() {\r\n  var jsonPath = path.join('.', this.attrs.pathToJson,\r\n      'package.json'),\r\n    self = this,\r\n    deferred = Defer();\r\n\r\n  fs.readFile(jsonPath, 'utf-8', function(err, data) {\r\n    if (err) {\r\n      deferred.reject();\r\n      return;\r\n    }\r\n    self.jsons.client = parsePackageJson.call(self, data);\r\n\r\n    deferred.resolve();\r\n  });\r\n  return deferred;\r\n};\r\n\r\n/**\r\n * Fetches and reads the remote package.json\r\n * @method loadRemoteJson\r\n * @return {Promise}\r\n * @private\r\n */\r\nvar loadRemoteJson = function() {\r\n  var self = this,\r\n    jsoninfo = self.jsons.client['auto-updater'],\r\n    repo = jsoninfo.repo,\r\n    branch = jsoninfo.branch,\r\n    jsonPath = path.join(repo,\r\n      branch,\r\n      this.attrs.pathToJson,\r\n      'package.json'),\r\n    deferred = Defer();\r\n\r\n  remoteDownloader.call(this, {\r\n      host: this.attrs.jsonhost,\r\n      path: '/' + jsonPath\r\n    })\r\n    .then(function(data) {\r\n      self.jsons.remote = parsePackageJson.call(self, data);\r\n      self.updateName = self.update_dest + '-' + self.jsons.remote.version + '.zip';\r\n\r\n      deferred.resolve();\r\n    }, deferred.reject.bind(deferred));\r\n  return deferred;\r\n};\r\n\r\n/**\r\n *\r\n * Fires:\r\n *   'check.up-to-date' if local version and remote version match\r\n *   'end' cause it finished checking\r\n *   'check.out-dated' if the versions don't match\r\n * @method loaded\r\n * @private\r\n */\r\nvar loaded = function() {\r\n  var clientVersion = this.jsons.client.version,\r\n    remoteVersion = this.jsons.remote.version;\r\n\r\n  if (clientVersion === remoteVersion) {\r\n    emit(this, 'check.up-to-date', remoteVersion);\r\n    emit(this, 'end');\r\n  } else {\r\n    emit(this, 'check.out-dated', clientVersion, remoteVersion);\r\n    if (this.attrs.autoupdate) {\r\n      this.fire('download-update');\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Fires:\r\n *   'download.error' In case the download fails\r\n * @method remoteDownloader\r\n * @param  {[type]} opc      Object containing host, path and method of the download\r\n * @return {Promise}\r\n * @private\r\n */\r\nvar remoteDownloader = function(opc, callback) {\r\n  if (!opc.host || !opc.path) return;\r\n\r\n  var self = this,\r\n    deferred = Defer();\r\n\r\n  var request = https.request(opc, function(res) {\r\n\r\n    var data = '';\r\n\r\n    res.on('data', function(d) {\r\n      data = data + d;\r\n    });\r\n\r\n    res.on('end', function() {\r\n      var error = null;\r\n      try {\r\n        data = JSON.parse(data);\r\n      } catch (e) {\r\n        self.error('Error reading the dowloaded JSON: ' + data, 'download.error', {\r\n          e: e,\r\n          response: data,\r\n          path: opc.path,\r\n          host: opc.host\r\n        });\r\n        deferred.reject(e);\r\n        return;\r\n      }\r\n      deferred.resolve(data);\r\n    });\r\n\r\n  });\r\n\r\n  request.on('error', function(e) {\r\n    self.error('Error downloaing the remote JSON', 'download.error', e);\r\n    deferred.reject();\r\n  });\r\n\r\n  request.end();\r\n  return deferred;\r\n};\r\n\r\n/**\r\n * Fires:\r\n *   'download.start'\r\n *   'download.progress'\r\n *   'download.end'\r\n *   'download.error'\r\n * @method remoteDownloadUpdate\r\n * @param  {String} name Name of the update\r\n * @param  {Object} opc Download request options\r\n * @return {Promise}\r\n * @private\r\n */\r\nvar remoteDownloadUpdate = function(name, opc) {\r\n  var self = this,\r\n    deferred = Defer();\r\n\r\n  // Ya tengo el update. Falta instalarlo.\r\n  if (fs.existsSync(name)) {\r\n    deferred.resolve(true);\r\n    return deferred;\r\n  }\r\n\r\n  // No tengo el archivo! Descargando!!\r\n  var protocol;\r\n  if (opc.ssh === false) protocol = http;\r\n  else protocol = https;\r\n\r\n  // download request\r\n  var request = protocol.get(opc, function(res) {\r\n    // Check if the file already exists and remove it if it does\r\n    if (fs.existsSync('_' + name)) fs.unlinkSync('_' + name);\r\n\r\n    // Download started\r\n    emit(self, 'download.start', name);\r\n\r\n    // Writestream for the binary file\r\n    var file = fs.createWriteStream('_' + name),\r\n      len = parseInt(res.headers['content-length'], 10),\r\n      current = 0;\r\n\r\n    // Pipe any new block to the stream\r\n    res.pipe(file);\r\n\r\n    var dataRecieve = function(chunk) {\r\n      current += chunk.length;\r\n      perc = (100.0 * (current / len)).toFixed(2);\r\n      emit(self, 'download.progress', name, perc);\r\n    };\r\n\r\n    if (self.attrs.progressDebounce) {\r\n      res.on('data', _.debounce(dataRecieve, self.attrs.progressDebounce));\r\n    } else {\r\n      res.on('data', dataRecieve);\r\n    }\r\n\r\n    res.on('end', function() {\r\n      file.end();\r\n    });\r\n\r\n    file.on('finish', function() {\r\n      fs.renameSync('_' + name, name);\r\n      emit(self, 'download.end', name);\r\n\r\n      deferred.resolve();\r\n    });\r\n  });\r\n  request.end();\r\n  request.on('error', function(e) {\r\n    deferred.reject();\r\n    emit(self, 'download.error', e);\r\n  });\r\n\r\n  return deferred;\r\n};\r\n\r\n/**\r\n * \r\n * @method extract\r\n * @param  {String}   name      Path of zip\r\n * @param  {Boolean}   subfolder If subfolder. (check Adm-zip)\r\n * @return {Promise}\r\n * @private\r\n */\r\nvar extract = function(name, subfolder) {\r\n  var admzip = require('adm-zip');\r\n\r\n  var zip = new admzip(name);\r\n  var zipEntries = zip.getEntries(); // an array of ZipEntry records\r\n  var deferred = Defer();\r\n\r\n  if (subfolder) {\r\n    zip.extractAllTo('./', true);\r\n  } else {\r\n    zip.extractEntryTo(zipEntries[0], './', false, true);\r\n  }\r\n\r\n  fs.unlink(name, deferred.resolve.bind(deferred));\r\n  return deferred;\r\n};\r\n\r\n/**\r\n * Iterates over the local and remote dependencies to check if they have changed\r\n * @method checkDependencies\r\n * @return {Boolean} If they have changed\r\n * @private\r\n */\r\nvar checkDependencies = function() {\r\n  var client = this.jsons.client.dependencies,\r\n    remote = this.jsons.remote.dependencies,\r\n    cache = this.cache;\r\n\r\n  if (!client || !remote) {\r\n    this.error('Error: you need to check the jsons before checking dependencies', 'dependencies.error');\r\n    return;\r\n  }\r\n\r\n  cache.dependencies = [];\r\n\r\n  _.each(remote, function(value, key) {\r\n    // Check that the client has the key, or that the versions are the same\r\n    if (!client.hasOwnProperty(key) ||\r\n      value !== client[key]) {\r\n      // Log the diff\r\n      cache.dependencies.push(key);\r\n    }\r\n  });\r\n  return (cache.dependencies.length > 0);\r\n};\r\n\r\nmodule.exports = AutoUpdater;\r\n"}